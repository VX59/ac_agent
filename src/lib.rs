use std::ffi::c_void;

use agent_utils::Playerent;
use hooks::init_hooks;
use libc::{c_int, dl_iterate_phdr, dl_phdr_info, size_t};

mod agent_utils;
mod hooks;
mod sdl;

// Generated by YClass 0.1.0
// Made by @ItsEthra

fn find_base_address() -> u64 {
    extern "C" fn callback(
        info: *mut dl_phdr_info,
        _size: size_t,
        data: *mut libc::c_void,
    ) -> c_int {
        unsafe {
            let info = &*info;
            let base_address = data as *mut u64;
            if info.dlpi_name.is_null() || *info.dlpi_name == 0 {
                *base_address = info.dlpi_addr;
                1
            } else {
                0
            }
        }
    }
    let mut base_address: u64 = 0;
    unsafe {
        dl_iterate_phdr(Some(callback), &mut base_address as *mut u64 as *mut c_void);
    }
    base_address
}

#[used]
#[unsafe(link_section = ".init_array")]
static INIT: extern "C" fn() = {
    extern "C" fn init() {
        unsafe {
            let native_client_addr: u64 = find_base_address();
            println!("native client handle {:?}", native_client_addr);

            let _player1 = {
                let addr = (native_client_addr + 0x1ab4b8) as *const *const Playerent;
                &**addr
            };

            init_hooks(native_client_addr);
        }
    }
    init
};

#[used]
#[unsafe(link_section = ".fini_array")]
static FINI: extern "C" fn() = {
    extern "C" fn fini() {
        println!("goodbye world");
    }
    fini
};
