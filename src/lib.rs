use std::ffi::CString;
use std::ffi::c_void;
use std::mem::transmute;
use std::ptr;

use crate::agent_utils::{TraceresultS, Vec};
use crate::sdl::SDL_event;
use libc::{RTLD_LAZY, c_int, dl_iterate_phdr, dl_phdr_info, dlopen, dlsym, size_t};

mod agent_utils;
mod sdl;

type SdlPushEventFn = unsafe extern "C" fn(*mut SDL_event) -> i32;
type SdlGetMouseStateFn = unsafe extern "C" fn(*const i32, *const i32) -> u32;
type TraceLineFn = unsafe extern "C" fn(Vec, Vec, u64, bool, TraceresultS) -> *mut std::ffi::c_void;

static mut SDL_PUSHEVENT: Option<SdlPushEventFn> = None;
static mut SDL_GETMOUSESTATE: Option<SdlGetMouseStateFn> = None;
static mut TRACE_LINE: Option<TraceLineFn> = None;

static mut CHECK_INPUT_ADDR: Option<*mut u64> = None;
static mut HOOK_ORIGINAL_INSTR_ADDR: Option<*mut c_void> = None;

// Generated by YClass 0.1.0
// Made by @ItsEthra

#[repr(C)]
pub struct Playerent {
    _pad_0x28: [u8; 0x28],
    pub uint32: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub yaw: f32,
    pub pitch: f32,
    pub roll: f32,
    _pad_0x100: [u8; 0xbc],
    pub health: i32,
    _pad_0x320: [u8; 0x21c],
    pub team: u32,
}

fn find_base_address() -> u64 {
    extern "C" fn callback(
        info: *mut dl_phdr_info,
        _size: size_t,
        data: *mut libc::c_void,
    ) -> c_int {
        unsafe {
            let info = &*info;
            let base_address = data as *mut u64;
            if info.dlpi_name.is_null() || *info.dlpi_name == 0 {
                *base_address = info.dlpi_addr;
                1
            } else {
                0
            }
        }
    }
    let mut base_address: u64 = 0;
    unsafe {
        dl_iterate_phdr(Some(callback), &mut base_address as *mut u64 as *mut c_void);
    }
    base_address
}

#[used]
#[unsafe(link_section = ".init_array")]
static INIT: extern "C" fn() = {
    extern "C" fn init() {
        unsafe {
            let native_client_addr: u64 = find_base_address();
            println!("native client handle {:?}", native_client_addr);

            let player1 = {
                let addr = (native_client_addr + 0x1ab4b8) as *const *const Playerent;
                &**addr
            };

            println!(
                "player 1 address is {:?}",
                player1 as *const Playerent as u64
            );
            println!("player1 health is {:?}", player1.health);

            /*
            let sdl_lib_handle =
                dlopen(CString::new("libSDL2-2.0.so").unwrap().as_ptr(), RTLD_LAZY);

            SDL_PUSHEVENT = transmute(dlsym(
                sdl_lib_handle as *mut c_void,
                CString::new("SDL_PushEvent").unwrap().as_ptr(),
            ));

            SDL_GETMOUSESTATE = transmute(dlsym(
                sdl_lib_handle as *mut c_void,
                CString::new("SDL_GetMouseState").unwrap().as_ptr(),
            ));
             */

            //            TRACE_LINE = transmute((native_client_addr as *mut u64).offset(0x134520));

            //           CHECK_INPUT_ADDR = Some((native_client_addr as *mut u64).offset(0x772d0));
        }
    }
    init
};

#[used]
#[unsafe(link_section = ".fini_array")]
static FINI: extern "C" fn() = {
    extern "C" fn fini() {
        println!("goodbye world");
    }
    fini
};
